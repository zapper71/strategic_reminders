name: Strategic Reminders

on:
  schedule:
    # 6:00 AM America/Toronto (split for DST vs Standard Time)
    - cron: '0 10 * 3-11 *'   # Mar–Nov ≈ UTC-4
    - cron: '0 11 * 1-2,12 *' # Dec–Feb ≈ UTC-5
  workflow_dispatch: {}

jobs:
  run-reminders:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
      TWILIO_AUTH_TOKEN:  ${{ secrets.TWILIO_AUTH_TOKEN }}
      TWILIO_FROM:        ${{ secrets.TWILIO_FROM }}
      TO_PHONE:           ${{ secrets.TO_PHONE }}
      DASHBOARD_LINK:     ${{ secrets.DASHBOARD_LINK }}
      HEALTHCHECK_URL:    ${{ secrets.HEALTHCHECK_URL }}

    steps:
      - name: "Checkout repo"
        uses: actions/checkout@v4

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: "Preflight: validate required secrets"
        run: |
          missing=()
          for v in TWILIO_ACCOUNT_SID TWILIO_AUTH_TOKEN TWILIO_FROM TO_PHONE DASHBOARD_LINK; do
            if [ -z "${!v}" ]; then
              echo "::error::$v is EMPTY"
              missing+=("$v")
            else
              echo "$v=SET"
            fi
          done
          if [ ${#missing[@]} -gt 0 ]; then
            echo "Missing: ${missing[*]}"
            exit 1
          fi

      - name: "Healthcheck start (optional)"
        if: ${{ env.HEALTHCHECK_URL != '' }}
        run: curl -fsS -m 10 --retry 3 "$HEALTHCHECK_URL/start" || true

      - name: "SMS: Daily dashboard link"
        run: |
          python - <<'PY'
          import os, sys
          from twilio.rest import Client
          def need(k):
              v=os.environ.get(k)
              if not v:
                  print(f"::error::{k} missing"); sys.exit(1)
              return v
          acc=need("TWILIO_ACCOUNT_SID"); tok=need("TWILIO_AUTH_TOKEN")
          frm=need("TWILIO_FROM");        to =need("TO_PHONE")
          link=os.environ.get("DASHBOARD_LINK","")
          body=f"Daily dashboard. Link: {link}"
          print("Sending:", body)
          sid=Client(acc,tok).messages.create(to=to, from_=frm, body=body).sid
          print("Sent SID:", sid)
          PY

      - name: "SMS: Weekly reminder (guarded)"
        run: python reminder_sms.py weekly

      - name: "SMS: Monthly reminder (guarded)"
        run: python reminder_sms.py monthly

      - name: "SMS: Quarterly reminder (guarded)"
        run: python reminder_sms.py quarterly

      - name: "Healthcheck success"
        if: ${{ success() && env.HEALTHCHECK_URL != '' }}
        run: curl -fsS -m 10 --retry 3 "$HEALTHCHECK_URL" || true

      - name: "Healthcheck fail"
        if: ${{ failure() && env.HEALTHCHECK_URL != '' }}
        run: curl -fsS -m 10 --retry 3 -d "status=fail" "$HEALTHCHECK_URL/fail" || true
